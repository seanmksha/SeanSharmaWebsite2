/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "../projects-sidebar.component.ngfactory";
import * as i2 from "../projects-sidebar.component";
import * as i3 from "@angular/router";
import * as i4 from "@angular/common";
import * as i5 from "../../MainSections/Footer.component.ngfactory";
import * as i6 from "../../MainSections/Footer.component";
import * as i7 from "./SearchEngine.component";
var styles_SearchEngineComponent = [];
var RenderType_SearchEngineComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_SearchEngineComponent, data: {} });
export { RenderType_SearchEngineComponent as RenderType_SearchEngineComponent };
export function View_SearchEngineComponent_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 179, "div", [["class", "row"]], null, null, null, null, null)), (_l()(), i0.ɵeld(1, 0, null, null, 2, "div", [["class", "d-none d-lg-block col-lg-2"]], null, null, null, null, null)), (_l()(), i0.ɵeld(2, 0, null, null, 1, "projects-sidebar", [], null, null, null, i1.View_ProjectsSidebarComponent_0, i1.RenderType_ProjectsSidebarComponent)), i0.ɵdid(3, 49152, null, 0, i2.ProjectsSidebarComponent, [], null, null), (_l()(), i0.ɵeld(4, 0, null, null, 0, "div", [["class", "d-none d-lg-block col-lg-1"]], null, null, null, null, null)), (_l()(), i0.ɵeld(5, 0, null, null, 174, "div", [["class", "col-md-12 col-lg-8"]], null, null, null, null, null)), (_l()(), i0.ɵeld(6, 0, null, null, 173, "div", [["class", "mainContainer"]], null, null, null, null, null)), (_l()(), i0.ɵeld(7, 0, null, null, 3, "a", [], [[1, "target", 0], [8, "href", 4]], [[null, "click"]], function (_v, en, $event) { var ad = true; if (("click" === en)) {
        var pd_0 = (i0.ɵnov(_v, 8).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);
        ad = (pd_0 && ad);
    } return ad; }, null, null)), i0.ɵdid(8, 671744, null, 0, i3.RouterLinkWithHref, [i3.Router, i3.ActivatedRoute, i4.LocationStrategy], { routerLink: [0, "routerLink"] }, null), i0.ɵpad(9, 1), (_l()(), i0.ɵted(-1, null, ["Home"])), (_l()(), i0.ɵted(-1, null, [" >> "])), (_l()(), i0.ɵeld(12, 0, null, null, 3, "a", [], [[1, "target", 0], [8, "href", 4]], [[null, "click"]], function (_v, en, $event) { var ad = true; if (("click" === en)) {
        var pd_0 = (i0.ɵnov(_v, 13).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);
        ad = (pd_0 && ad);
    } return ad; }, null, null)), i0.ɵdid(13, 671744, null, 0, i3.RouterLinkWithHref, [i3.Router, i3.ActivatedRoute, i4.LocationStrategy], { routerLink: [0, "routerLink"] }, null), i0.ɵpad(14, 1), (_l()(), i0.ɵted(-1, null, ["Projects"])), (_l()(), i0.ɵted(-1, null, [" >> "])), (_l()(), i0.ɵeld(17, 0, null, null, 3, "a", [], [[1, "target", 0], [8, "href", 4]], [[null, "click"]], function (_v, en, $event) { var ad = true; if (("click" === en)) {
        var pd_0 = (i0.ɵnov(_v, 18).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);
        ad = (pd_0 && ad);
    } return ad; }, null, null)), i0.ɵdid(18, 671744, null, 0, i3.RouterLinkWithHref, [i3.Router, i3.ActivatedRoute, i4.LocationStrategy], { routerLink: [0, "routerLink"] }, null), i0.ɵpad(19, 1), (_l()(), i0.ɵted(20, null, ["", ""])), (_l()(), i0.ɵeld(21, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵeld(22, 0, null, null, 1, "h1", [], null, null, null, null, null)), (_l()(), i0.ɵted(23, null, ["", ""])), (_l()(), i0.ɵeld(24, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵeld(25, 0, null, null, 1, "div", [["class", "headerContainer"]], null, null, null, null, null)), (_l()(), i0.ɵeld(26, 0, null, null, 0, "img", [["class", "width500"]], [[8, "src", 4]], null, null, null, null)), (_l()(), i0.ɵeld(27, 0, null, null, 1, "b", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["Web Crawler"])), (_l()(), i0.ɵeld(29, 0, null, null, 1, "p", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["The web crawler uses crawler4j to gather statistics off of websites. It reads the robots.txt and uses HTTP Requests to gather information.In this case it's gathering file sizes, http statuses encounter, content types, unique links, links, and outgoing links off of websites. It also downloads the webpages found that are html file types so that we can index them."])), (_l()(), i0.ɵeld(31, 0, null, null, 1, "b", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["Search Engine"])), (_l()(), i0.ɵeld(33, 0, null, null, 1, "p", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["I took the downloaded files and stored them on an ubuntu server. I used solr to index the files onto a database for searching."])), (_l()(), i0.ɵeld(35, 0, null, null, 1, "p", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["Finally, using an solr php client I set up a local webpage to search the crawled information. Showing the top ten results for solr's default ranking algorithm."])), (_l()(), i0.ɵeld(37, 0, null, null, 1, "p", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["Using java to read the html's I extracted the links and mapped them to html's in the database. Using Networkx in Python I took the file generated about the extracted links and calculated page ranks for all of the pages. The page's values were put into Solr as a sorting method."])), (_l()(), i0.ɵeld(39, 0, null, null, 1, "b", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["SpellCorrection"])), (_l()(), i0.ɵeld(41, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵeld(42, 0, null, null, 1, "p", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["I used norvig's php spell correction file and the Simple HTML DOM php program. Then, I edited the php program provided by norvig so that it read each file from my html directory. The simple HTML DOM Program took the source text and converted it all to plain text. Next, I\nremoved all of the tags from the plain text that were any displayed on the htmls. Norvig's trained the set of correct words on the plain text by counting the occurences and probability of each word occuring. When a word was submitted during the query if the c parameter wasn't specified then the word was sent into spellcorrect. If it was specified then the program ignores the spell correction and returns the results. In the case of more than one word in a query, the string is delimited into separate words. Each word is separately put into the spell corrector, and then\nre-concatenated. I handled spelling correct similar to google. Some different ways of handling spelling correction were suggested (such as showing the uncorrected version's results first), but\nI figured it was safer to just copy the way google handles it. If the returned spell corrected word is the same (case insensitive) as the original, then the query results are shown without a message. If the spell\ncorrection and original are different then it shows the results with the corrected version. It displays a message asking the user saying that it's displaying the corrected version and\nasks the user if it wants instead search for the incorrect spelling with a link to the query with the c parameter set to ignore spell correction."])), (_l()(), i0.ɵeld(44, 0, null, null, 3, "b", [], null, null, null, null, null)), (_l()(), i0.ɵeld(45, 0, null, null, 1, "div", [["class", "headerContainer"]], null, null, null, null, null)), (_l()(), i0.ɵeld(46, 0, null, null, 0, "img", [["class", "width500"]], [[8, "src", 4]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nAutocomplete "])), (_l()(), i0.ɵeld(48, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵeld(49, 0, null, null, 1, "p", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["I used solr's autocomplete functionality and the jquery autocomplete library. First I followed the steps to setting up the fuzzylookup factory\nin the tutorial. The only difference made, was that we set the count of suggestions to be 30 instead of 5. This number didn't\ncause a noticeable delay, and provided a more than sufficient number of suggestions that could be parsed by my system and filtered.\nI also utilized the autocomplete jquery component using ajax calls, the call retrieves the suggestions for the last word that\nwas previously typed. It pretends the current string before the last word to the suggestions for the last word. Words are\nfiltered out if they contain nonalphanumerics. Words are also filtered out if they contain a stop word, unless the stop word\nis part of the pre-pended string that was already typed by the user. I used http://www.ranks.nl/stopwords as my source for stop words, putting all of the words into an array. I removed \"go\",since Pokemon Go can be a proper noun. The non-pretended string was split by their whitespaces,\nand tested agaisnt the array. The array is sliced to only include the first 5 (top 5) words. The (max 5) suggestions are showed and pretended to the already-typed\nwords. "])), (_l()(), i0.ɵeld(51, 0, null, null, 1, "b", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["Snippets:"])), (_l()(), i0.ɵeld(53, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵeld(54, 0, null, null, 1, "p", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [" First, the result is opened locally. We obtained the text between the head tags, and then the body tags. We used the simple HTML Dom php program to parse the\ncontent into plain text, and We removed tags. Originally we split each sentence into an array; however, this approach had performance issues. We optimized\nthe algorithm to instead search sentence by sentence using the next occurence of a \". \" (period with a space after). In the first check, it checks to see that the sentence contains all of the query words, and returns the first sentence that does. The snippet is found if there exists such a sentence; however,\nif there doesn't it starts from the beginning. This time it returns the sentence as the valid snippet if it finds one of the terms in the sentence. If none\nof the terms are found, then the snippet isn't displayed. "])), (_l()(), i0.ɵeld(56, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nFIVE examples of misspelled terms:"])), (_l()(), i0.ɵeld(58, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nbefore autocorrect -> after autocorrect"])), (_l()(), i0.ɵeld(60, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\n1. calfornia wildd fires -> california wild fires"])), (_l()(), i0.ɵeld(62, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\n2. donall trump -> donald trump"])), (_l()(), i0.ɵeld(64, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\n3. rio olympcs -> rio olympics"])), (_l()(), i0.ɵeld(66, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\n4. harrye potter -> harry potter"])), (_l()(), i0.ɵeld(68, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\n5. naro -> nato"])), (_l()(), i0.ɵeld(70, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵeld(71, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [" FIVE examples of auto correct"])), (_l()(), i0.ɵeld(73, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\ncurrently typed -> suggestion 1, suggestion 2, suggestion 3 , ... etc."])), (_l()(), i0.ɵeld(75, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\n1. Pokemon Go"])), (_l()(), i0.ɵeld(77, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nP -> parsed,privacy, policy, png, path"])), (_l()(), i0.ɵeld(79, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nPo -> po, policy, politics, position, popular"])), (_l()(), i0.ɵeld(81, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nPok -> pok, policy, politics, position, popular"])), (_l()(), i0.ɵeld(83, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nPoke -> poke, power, powered, potential, powerful"])), (_l()(), i0.ɵeld(85, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nPokem -> poem, podemos, poems, poker, pokemon"])), (_l()(), i0.ɵeld(87, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nPokemo -> podemos, pokemon, podemoses, ponemos, popemobile"])), (_l()(), i0.ɵeld(89, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nPokemon -> pokemon, ponemon"])), (_l()(), i0.ɵeld(91, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nPokemon G -> pokemon group, pokemon global, pokemon guidance, pokemon go, pokemon generated"])), (_l()(), i0.ɵeld(93, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nPokemon Go -> pokemon go, pokemon government, pokemon good, pokemon going, pokemon golf"])), (_l()(), i0.ɵeld(95, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵeld(96, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\n2. Rio Olympics"])), (_l()(), i0.ɵeld(98, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nR -> resourcename, rect, robots, return, require"])), (_l()(), i0.ɵeld(100, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nRi -> ri, rights, ribbon, riot, rig"])), (_l()(), i0.ɵeld(102, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nRio -> rio, robots, rights, ribbon, room"])), (_l()(), i0.ɵeld(104, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nRio O -> rio o, rio of, rio on, rio off, rio only"])), (_l()(), i0.ɵeld(106, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nRio Ol -> rio ol, rio old, rio oldonload, rio oliphant, rio olympics"])), (_l()(), i0.ɵeld(108, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nRio Oly -> rio oly, rio only, rio old, rio oldonload, rio oliphant"])), (_l()(), i0.ɵeld(110, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nRio Olym -> rio olympics, rio olympic, rio olympians, rio olympian, rio olmsted"])), (_l()(), i0.ɵeld(112, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nRio Olymp -> rio olympics, rio olympic, rio olympians, rio olympian, rio olympia"])), (_l()(), i0.ɵeld(114, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nRio Olympi -> rio olympics, rio olympic, rio olympians, rio olympian, rio olympia"])), (_l()(), i0.ɵeld(116, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nRio Olympic -> rio olympic, rio olympics, rio olympians, rio olympian, rio olympia"])), (_l()(), i0.ɵeld(118, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nRio Olympics -> rio olympics, rio olympic, rio olympism, rio olympicsrdf, rio olympcis"])), (_l()(), i0.ɵeld(120, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵeld(121, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\n3. Brazil"])), (_l()(), i0.ɵeld(123, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nB -> border, button, bottom, business, body"])), (_l()(), i0.ɵeld(125, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nBr -> br, breaking, brand, branding, browser"])), (_l()(), i0.ɵeld(127, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nBra -> bra, banner, black, breaking, brand"])), (_l()(), i0.ɵeld(129, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nBraz -> braz, brand, branding, brain, brazil"])), (_l()(), i0.ɵeld(131, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nBrazi -> brain, brazil, brazilian, brains, braking"])), (_l()(), i0.ɵeld(133, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nBrazil -> brazil, brazilian, brazilians, brasil, brasilia"])), (_l()(), i0.ɵeld(135, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵeld(136, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\n4. Dow Jones"])), (_l()(), i0.ɵeld(138, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nD -> description, document, default, device, digital"])), (_l()(), i0.ɵeld(140, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDo -> document, domain, download, dom, doc"])), (_l()(), i0.ɵeld(142, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDow -> dow, document, domain, download, dom"])), (_l()(), i0.ɵeld(144, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDow J -> dow jpg, dow javascript, dow js, dow jan, dow jquery"])), (_l()(), i0.ɵeld(146, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDow Jo -> dow jo, dow journalists, dow joe, dow jobs, dow journeys"])), (_l()(), i0.ɵeld(148, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDow Jon -> dow jon, dow jan, dow json, dow journalists, dow joe"])), (_l()(), i0.ɵeld(150, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDow Jone -> dow jone, dow joe, dow june, dow jones, dow joined"])), (_l()(), i0.ɵeld(152, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDow Jones -> dow jones, dow jokes, dow jonas, dow jonspoel, dow joes"])), (_l()(), i0.ɵeld(154, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵeld(155, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\n5. Donald Trump"])), (_l()(), i0.ɵeld(157, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nD-> description, document, default, device, digital"])), (_l()(), i0.ɵeld(159, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDo -> document, domain, download, dom, doc"])), (_l()(), i0.ɵeld(161, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDon -> don, document, domain, download, dom"])), (_l()(), i0.ɵeld(163, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDona -> dona, domain, donald, dont, dna"])), (_l()(), i0.ɵeld(165, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDonal -> donal, donald, donate, donated, donations"])), (_l()(), i0.ɵeld(167, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDonald -> donald, donaldson, donadio, donaldjtrumpjr, donaldbernie"])), (_l()(), i0.ɵeld(169, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDonald T -> donald text, donald type, donald top, donald terms, donald title"])), (_l()(), i0.ɵeld(171, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDonald Tr -> donald tr, donald true, donald travel, donald track, donald triangle"])), (_l()(), i0.ɵeld(173, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDonald Tru -> donald touch, donald true, donald travel, donald track, donald triangle"])), (_l()(), i0.ɵeld(175, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDonald Trum -> donald true, donald thumbnail, donald thumbstandard, donald thumb, donald thumblarge"])), (_l()(), i0.ɵeld(177, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, ["\nDonald Trump -> donald trump, donald trumps, donald triumph, donald trump2, donald triumphs"])), (_l()(), i0.ɵeld(179, 0, null, null, 0, "br", [], null, null, null, null, null)), (_l()(), i0.ɵeld(180, 0, null, null, 1, "Footer", [], null, null, null, i5.View_FooterComponent_0, i5.RenderType_FooterComponent)), i0.ɵdid(181, 49152, null, 0, i6.FooterComponent, [], null, null)], function (_ck, _v) { var currVal_2 = _ck(_v, 9, 0, "/"); _ck(_v, 8, 0, currVal_2); var currVal_5 = _ck(_v, 14, 0, "/Projects"); _ck(_v, 13, 0, currVal_5); var currVal_8 = _ck(_v, 19, 0, "/Projects/Search-Engine"); _ck(_v, 18, 0, currVal_8); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = i0.ɵnov(_v, 8).target; var currVal_1 = i0.ɵnov(_v, 8).href; _ck(_v, 7, 0, currVal_0, currVal_1); var currVal_3 = i0.ɵnov(_v, 13).target; var currVal_4 = i0.ɵnov(_v, 13).href; _ck(_v, 12, 0, currVal_3, currVal_4); var currVal_6 = i0.ɵnov(_v, 18).target; var currVal_7 = i0.ɵnov(_v, 18).href; _ck(_v, 17, 0, currVal_6, currVal_7); var currVal_9 = _co.header; _ck(_v, 20, 0, currVal_9); var currVal_10 = _co.header; _ck(_v, 23, 0, currVal_10); var currVal_11 = i0.ɵinlineInterpolate(1, "", _co.images[1], ""); _ck(_v, 26, 0, currVal_11); var currVal_12 = i0.ɵinlineInterpolate(1, "", _co.images[3], ""); _ck(_v, 46, 0, currVal_12); }); }
export function View_SearchEngineComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, "searchengine", [], null, null, null, View_SearchEngineComponent_0, RenderType_SearchEngineComponent)), i0.ɵdid(1, 49152, null, 0, i7.SearchEngineComponent, [], null, null)], null, null); }
var SearchEngineComponentNgFactory = i0.ɵccf("searchengine", i7.SearchEngineComponent, View_SearchEngineComponent_Host_0, {}, {}, []);
export { SearchEngineComponentNgFactory as SearchEngineComponentNgFactory };
